// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `iGuiHub.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;
using _Microsoft = global::Microsoft;

#pragma warning disable 1591

namespace MCS
{
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class GuiDataItem : _System.ICloneable
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public MCS.GuiHub.PushData enumTag;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public string sVal;

        #endregion

        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public GuiDataItem()
        {
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public GuiDataItem(MCS.GuiHub.PushData enumTag, string sVal)
        {
            this.enumTag = enumTag;
            this.sVal = sVal;
        }

        #endregion

        #region ICloneable members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public object Clone()
        {
            return MemberwiseClone();
        }

        #endregion

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override int GetHashCode()
        {
            int h__ = 0;
            h__ = 5 * h__ + enumTag.GetHashCode();
            if(sVal != null)
            {
                h__ = 5 * h__ + sVal.GetHashCode();
            }
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override bool Equals(object other__)
        {
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            if(other__ == null)
            {
                return false;
            }
            if(GetType() != other__.GetType())
            {
                return false;
            }
            GuiDataItem o__ = (GuiDataItem)other__;
            if(!enumTag.Equals(o__.enumTag))
            {
                return false;
            }
            if(sVal == null)
            {
                if(o__.sVal != null)
                {
                    return false;
                }
            }
            else
            {
                if(!sVal.Equals(o__.sVal))
                {
                    return false;
                }
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public static bool operator==(GuiDataItem lhs__, GuiDataItem rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public static bool operator!=(GuiDataItem lhs__, GuiDataItem rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshalling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public void write__(IceInternal.BasicStream os__)
        {
            os__.writeByte((byte)enumTag, 11);
            os__.writeString(sVal);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public void read__(IceInternal.BasicStream is__)
        {
            enumTag = (MCS.GuiHub.PushData)is__.readByte(11);
            sVal = is__.readString();
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface GuiDataUpdater : Ice.Object, GuiDataUpdaterOperations_, GuiDataUpdaterOperationsNC_
    {
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface GuiDataHub : Ice.Object, GuiDataHubOperations_, GuiDataHubOperationsNC_
    {
    }

    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class User : _System.ICloneable
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public int nID;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public string sName;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public int nRight;

        #endregion

        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public User()
        {
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public User(int nID, string sName, int nRight)
        {
            this.nID = nID;
            this.sName = sName;
            this.nRight = nRight;
        }

        #endregion

        #region ICloneable members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public object Clone()
        {
            return MemberwiseClone();
        }

        #endregion

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override int GetHashCode()
        {
            int h__ = 0;
            h__ = 5 * h__ + nID.GetHashCode();
            if(sName != null)
            {
                h__ = 5 * h__ + sName.GetHashCode();
            }
            h__ = 5 * h__ + nRight.GetHashCode();
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override bool Equals(object other__)
        {
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            if(other__ == null)
            {
                return false;
            }
            if(GetType() != other__.GetType())
            {
                return false;
            }
            User o__ = (User)other__;
            if(!nID.Equals(o__.nID))
            {
                return false;
            }
            if(sName == null)
            {
                if(o__.sName != null)
                {
                    return false;
                }
            }
            else
            {
                if(!sName.Equals(o__.sName))
                {
                    return false;
                }
            }
            if(!nRight.Equals(o__.nRight))
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public static bool operator==(User lhs__, User rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public static bool operator!=(User lhs__, User rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshalling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public void write__(IceInternal.BasicStream os__)
        {
            os__.writeInt(nID);
            os__.writeString(sName);
            os__.writeInt(nRight);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public void read__(IceInternal.BasicStream is__)
        {
            nID = is__.readInt();
            sName = is__.readString();
            nRight = is__.readInt();
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface UserManagement : Ice.Object, UserManagementOperations_, UserManagementOperationsNC_
    {
    }
}

namespace MCS
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_GuiDataUpdater_UpdateData();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_GuiDataHub_SetPushCmd(int ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_GuiDataHub_SetPushTimer(int ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_GuiDataHub_ReadData(string ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_GuiDataHub_WriteData(int ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_GuiDataHub_SetDataUpdater();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_GuiDataHub_EraseDataUpdater();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_UserManagement_Login(int ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_UserManagement_Logout(int ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_UserManagement_CreateUser(int ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_UserManagement_SetUserPW(int ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_UserManagement_SetUserRight(int ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_UserManagement_DeleteUser(int ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_UserManagement_GetUserCount(int ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_UserManagement_GetUserList(MCS.User[] ret__);
}

namespace MCS
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface GuiDataUpdaterPrx : Ice.ObjectPrx
    {
        void UpdateData(long time, MCS.GuiDataItem data);
        void UpdateData(long time, MCS.GuiDataItem data, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<MCS.Callback_GuiDataUpdater_UpdateData> begin_UpdateData(long time, MCS.GuiDataItem data);
        Ice.AsyncResult<MCS.Callback_GuiDataUpdater_UpdateData> begin_UpdateData(long time, MCS.GuiDataItem data, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_UpdateData(long time, MCS.GuiDataItem data, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_UpdateData(long time, MCS.GuiDataItem data, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_UpdateData(Ice.AsyncResult r__);

        bool UpdateData_async(MCS.AMI_GuiDataUpdater_UpdateData cb__, long time, MCS.GuiDataItem data);
        bool UpdateData_async(MCS.AMI_GuiDataUpdater_UpdateData cb__, long time, MCS.GuiDataItem data, _System.Collections.Generic.Dictionary<string, string> ctx__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface GuiDataHubPrx : Ice.ObjectPrx
    {
        int SetPushCmd(MCS.GuiDataUpdaterPrx updater, MCS.GuiHub.PushData[] list, int session);
        int SetPushCmd(MCS.GuiDataUpdaterPrx updater, MCS.GuiHub.PushData[] list, int session, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<MCS.Callback_GuiDataHub_SetPushCmd> begin_SetPushCmd(MCS.GuiDataUpdaterPrx updater, MCS.GuiHub.PushData[] list, int session);
        Ice.AsyncResult<MCS.Callback_GuiDataHub_SetPushCmd> begin_SetPushCmd(MCS.GuiDataUpdaterPrx updater, MCS.GuiHub.PushData[] list, int session, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_SetPushCmd(MCS.GuiDataUpdaterPrx updater, MCS.GuiHub.PushData[] list, int session, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_SetPushCmd(MCS.GuiDataUpdaterPrx updater, MCS.GuiHub.PushData[] list, int session, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        int end_SetPushCmd(Ice.AsyncResult r__);

        int SetPushTimer(int period, int session);
        int SetPushTimer(int period, int session, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<MCS.Callback_GuiDataHub_SetPushTimer> begin_SetPushTimer(int period, int session);
        Ice.AsyncResult<MCS.Callback_GuiDataHub_SetPushTimer> begin_SetPushTimer(int period, int session, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_SetPushTimer(int period, int session, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_SetPushTimer(int period, int session, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        int end_SetPushTimer(Ice.AsyncResult r__);

        string ReadData(MCS.GuiHub.GuiCommand Tag, int session);
        string ReadData(MCS.GuiHub.GuiCommand Tag, int session, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<MCS.Callback_GuiDataHub_ReadData> begin_ReadData(MCS.GuiHub.GuiCommand Tag, int session);
        Ice.AsyncResult<MCS.Callback_GuiDataHub_ReadData> begin_ReadData(MCS.GuiHub.GuiCommand Tag, int session, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_ReadData(MCS.GuiHub.GuiCommand Tag, int session, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_ReadData(MCS.GuiHub.GuiCommand Tag, int session, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        string end_ReadData(Ice.AsyncResult r__);

        int WriteData(MCS.GuiHub.GuiCommand Tag, string Val, int session);
        int WriteData(MCS.GuiHub.GuiCommand Tag, string Val, int session, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<MCS.Callback_GuiDataHub_WriteData> begin_WriteData(MCS.GuiHub.GuiCommand Tag, string Val, int session);
        Ice.AsyncResult<MCS.Callback_GuiDataHub_WriteData> begin_WriteData(MCS.GuiHub.GuiCommand Tag, string Val, int session, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_WriteData(MCS.GuiHub.GuiCommand Tag, string Val, int session, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_WriteData(MCS.GuiHub.GuiCommand Tag, string Val, int session, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        int end_WriteData(Ice.AsyncResult r__);

        void SetDataUpdater(MCS.GuiDataUpdaterPrx updater);
        void SetDataUpdater(MCS.GuiDataUpdaterPrx updater, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<MCS.Callback_GuiDataHub_SetDataUpdater> begin_SetDataUpdater(MCS.GuiDataUpdaterPrx updater);
        Ice.AsyncResult<MCS.Callback_GuiDataHub_SetDataUpdater> begin_SetDataUpdater(MCS.GuiDataUpdaterPrx updater, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_SetDataUpdater(MCS.GuiDataUpdaterPrx updater, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_SetDataUpdater(MCS.GuiDataUpdaterPrx updater, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_SetDataUpdater(Ice.AsyncResult r__);

        void EraseDataUpdater(MCS.GuiDataUpdaterPrx updater);
        void EraseDataUpdater(MCS.GuiDataUpdaterPrx updater, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<MCS.Callback_GuiDataHub_EraseDataUpdater> begin_EraseDataUpdater(MCS.GuiDataUpdaterPrx updater);
        Ice.AsyncResult<MCS.Callback_GuiDataHub_EraseDataUpdater> begin_EraseDataUpdater(MCS.GuiDataUpdaterPrx updater, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_EraseDataUpdater(MCS.GuiDataUpdaterPrx updater, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_EraseDataUpdater(MCS.GuiDataUpdaterPrx updater, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_EraseDataUpdater(Ice.AsyncResult r__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface UserManagementPrx : Ice.ObjectPrx
    {
        int Login(string user, string pass);
        int Login(string user, string pass, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<MCS.Callback_UserManagement_Login> begin_Login(string user, string pass);
        Ice.AsyncResult<MCS.Callback_UserManagement_Login> begin_Login(string user, string pass, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_Login(string user, string pass, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_Login(string user, string pass, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        int end_Login(Ice.AsyncResult r__);

        int Logout(int session);
        int Logout(int session, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<MCS.Callback_UserManagement_Logout> begin_Logout(int session);
        Ice.AsyncResult<MCS.Callback_UserManagement_Logout> begin_Logout(int session, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_Logout(int session, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_Logout(int session, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        int end_Logout(Ice.AsyncResult r__);

        int CreateUser(string user, string pass, int nRight, int session);
        int CreateUser(string user, string pass, int nRight, int session, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<MCS.Callback_UserManagement_CreateUser> begin_CreateUser(string user, string pass, int nRight, int session);
        Ice.AsyncResult<MCS.Callback_UserManagement_CreateUser> begin_CreateUser(string user, string pass, int nRight, int session, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_CreateUser(string user, string pass, int nRight, int session, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_CreateUser(string user, string pass, int nRight, int session, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        int end_CreateUser(Ice.AsyncResult r__);

        int SetUserPW(int nUID, string pass, int session);
        int SetUserPW(int nUID, string pass, int session, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<MCS.Callback_UserManagement_SetUserPW> begin_SetUserPW(int nUID, string pass, int session);
        Ice.AsyncResult<MCS.Callback_UserManagement_SetUserPW> begin_SetUserPW(int nUID, string pass, int session, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_SetUserPW(int nUID, string pass, int session, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_SetUserPW(int nUID, string pass, int session, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        int end_SetUserPW(Ice.AsyncResult r__);

        int SetUserRight(int nUID, int nRight, int session);
        int SetUserRight(int nUID, int nRight, int session, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<MCS.Callback_UserManagement_SetUserRight> begin_SetUserRight(int nUID, int nRight, int session);
        Ice.AsyncResult<MCS.Callback_UserManagement_SetUserRight> begin_SetUserRight(int nUID, int nRight, int session, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_SetUserRight(int nUID, int nRight, int session, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_SetUserRight(int nUID, int nRight, int session, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        int end_SetUserRight(Ice.AsyncResult r__);

        int DeleteUser(int nUID, int session);
        int DeleteUser(int nUID, int session, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<MCS.Callback_UserManagement_DeleteUser> begin_DeleteUser(int nUID, int session);
        Ice.AsyncResult<MCS.Callback_UserManagement_DeleteUser> begin_DeleteUser(int nUID, int session, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_DeleteUser(int nUID, int session, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_DeleteUser(int nUID, int session, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        int end_DeleteUser(Ice.AsyncResult r__);

        int GetUserCount(int session);
        int GetUserCount(int session, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<MCS.Callback_UserManagement_GetUserCount> begin_GetUserCount(int session);
        Ice.AsyncResult<MCS.Callback_UserManagement_GetUserCount> begin_GetUserCount(int session, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_GetUserCount(int session, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_GetUserCount(int session, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        int end_GetUserCount(Ice.AsyncResult r__);

        MCS.User[] GetUserList(int nBegin, int nCount, int session);
        MCS.User[] GetUserList(int nBegin, int nCount, int session, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<MCS.Callback_UserManagement_GetUserList> begin_GetUserList(int nBegin, int nCount, int session);
        Ice.AsyncResult<MCS.Callback_UserManagement_GetUserList> begin_GetUserList(int nBegin, int nCount, int session, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_GetUserList(int nBegin, int nCount, int session, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_GetUserList(int nBegin, int nCount, int session, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        MCS.User[] end_GetUserList(Ice.AsyncResult r__);
    }
}

namespace MCS
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface GuiDataUpdaterOperations_
    {
        void UpdateData_async(MCS.AMD_GuiDataUpdater_UpdateData cb__, long time, MCS.GuiDataItem data, Ice.Current current__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface GuiDataUpdaterOperationsNC_
    {
        void UpdateData_async(MCS.AMD_GuiDataUpdater_UpdateData cb__, long time, MCS.GuiDataItem data);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface GuiDataHubOperations_
    {
        int SetPushCmd(MCS.GuiDataUpdaterPrx updater, MCS.GuiHub.PushData[] list, int session, Ice.Current current__);

        int SetPushTimer(int period, int session, Ice.Current current__);

        string ReadData(MCS.GuiHub.GuiCommand Tag, int session, Ice.Current current__);

        int WriteData(MCS.GuiHub.GuiCommand Tag, string Val, int session, Ice.Current current__);

        void SetDataUpdater(MCS.GuiDataUpdaterPrx updater, Ice.Current current__);

        void EraseDataUpdater(MCS.GuiDataUpdaterPrx updater, Ice.Current current__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface GuiDataHubOperationsNC_
    {
        int SetPushCmd(MCS.GuiDataUpdaterPrx updater, MCS.GuiHub.PushData[] list, int session);

        int SetPushTimer(int period, int session);

        string ReadData(MCS.GuiHub.GuiCommand Tag, int session);

        int WriteData(MCS.GuiHub.GuiCommand Tag, string Val, int session);

        void SetDataUpdater(MCS.GuiDataUpdaterPrx updater);

        void EraseDataUpdater(MCS.GuiDataUpdaterPrx updater);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface UserManagementOperations_
    {
        int Login(string user, string pass, Ice.Current current__);

        int Logout(int session, Ice.Current current__);

        int CreateUser(string user, string pass, int nRight, int session, Ice.Current current__);

        int SetUserPW(int nUID, string pass, int session, Ice.Current current__);

        int SetUserRight(int nUID, int nRight, int session, Ice.Current current__);

        int DeleteUser(int nUID, int session, Ice.Current current__);

        int GetUserCount(int session, Ice.Current current__);

        MCS.User[] GetUserList(int nBegin, int nCount, int session, Ice.Current current__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface UserManagementOperationsNC_
    {
        int Login(string user, string pass);

        int Logout(int session);

        int CreateUser(string user, string pass, int nRight, int session);

        int SetUserPW(int nUID, string pass, int session);

        int SetUserRight(int nUID, int nRight, int session);

        int DeleteUser(int nUID, int session);

        int GetUserCount(int session);

        MCS.User[] GetUserList(int nBegin, int nCount, int session);
    }
}

namespace MCS
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class GuiDataUpdaterPrxHelper : Ice.ObjectPrxHelperBase, GuiDataUpdaterPrx
    {
        #region Synchronous operations

        public void UpdateData(long time, MCS.GuiDataItem data)
        {
            UpdateData(time, data, null, false);
        }

        public void UpdateData(long time, MCS.GuiDataItem data, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            UpdateData(time, data, context__, true);
        }

        private void UpdateData(long time, MCS.GuiDataItem data, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    delBase__ = getDelegate__(false);
                    GuiDataUpdaterDel_ del__ = (GuiDataUpdaterDel_)delBase__;
                    del__.UpdateData(time, data, context__);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        #endregion

        #region Asynchronous operations

        public Ice.AsyncResult<MCS.Callback_GuiDataUpdater_UpdateData> begin_UpdateData(long time, MCS.GuiDataItem data)
        {
            return begin_UpdateData(time, data, null, false, null, null);
        }

        public Ice.AsyncResult<MCS.Callback_GuiDataUpdater_UpdateData> begin_UpdateData(long time, MCS.GuiDataItem data, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_UpdateData(time, data, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_UpdateData(long time, MCS.GuiDataItem data, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_UpdateData(time, data, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_UpdateData(long time, MCS.GuiDataItem data, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_UpdateData(time, data, ctx__, true, cb__, cookie__);
        }

        private const string __UpdateData_name = "UpdateData";

        public void end_UpdateData(Ice.AsyncResult r__)
        {
            end__(r__, __UpdateData_name);
        }

        private Ice.AsyncResult<MCS.Callback_GuiDataUpdater_UpdateData> begin_UpdateData(long time, MCS.GuiDataItem data, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            IceInternal.OnewayOutgoingAsync<MCS.Callback_GuiDataUpdater_UpdateData> result__ = new IceInternal.OnewayOutgoingAsync<MCS.Callback_GuiDataUpdater_UpdateData>(this, __UpdateData_name, UpdateData_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__UpdateData_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeLong(time);
                if(data == null)
                {
                    MCS.GuiDataItem tmp__ = new MCS.GuiDataItem();
                    tmp__.write__(os__);
                }
                else
                {
                    data.write__(os__);
                }
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void UpdateData_completed__(MCS.Callback_GuiDataUpdater_UpdateData cb__)
        {
            if(cb__ != null)
            {
                cb__();
            }
        }

        public bool UpdateData_async(MCS.AMI_GuiDataUpdater_UpdateData cb__, long time, MCS.GuiDataItem data)
        {
            Ice.AsyncResult<MCS.Callback_GuiDataUpdater_UpdateData> result__ = begin_UpdateData(time, data);
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public bool UpdateData_async(MCS.AMI_GuiDataUpdater_UpdateData cb__, long time, MCS.GuiDataItem data, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            Ice.AsyncResult<MCS.Callback_GuiDataUpdater_UpdateData> result__ = begin_UpdateData(time, data, ctx__);
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        #endregion

        #region Checked and unchecked cast operations

        public static GuiDataUpdaterPrx checkedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            GuiDataUpdaterPrx r = b as GuiDataUpdaterPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                GuiDataUpdaterPrxHelper h = new GuiDataUpdaterPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static GuiDataUpdaterPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            GuiDataUpdaterPrx r = b as GuiDataUpdaterPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                GuiDataUpdaterPrxHelper h = new GuiDataUpdaterPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static GuiDataUpdaterPrx checkedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    GuiDataUpdaterPrxHelper h = new GuiDataUpdaterPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static GuiDataUpdaterPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    GuiDataUpdaterPrxHelper h = new GuiDataUpdaterPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static GuiDataUpdaterPrx uncheckedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            GuiDataUpdaterPrx r = b as GuiDataUpdaterPrx;
            if(r == null)
            {
                GuiDataUpdaterPrxHelper h = new GuiDataUpdaterPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static GuiDataUpdaterPrx uncheckedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            GuiDataUpdaterPrxHelper h = new GuiDataUpdaterPrxHelper();
            h.copyFrom__(bb);
            return h;
        }

        public static readonly string[] ids__ =
        {
            "::Ice::Object",
            "::MCS::GuiDataUpdater"
        };

        public static string ice_staticId()
        {
            return ids__[1];
        }

        #endregion

        #region Marshaling support

        protected override Ice.ObjectDelM_ createDelegateM__()
        {
            return new GuiDataUpdaterDelM_();
        }

        protected override Ice.ObjectDelD_ createDelegateD__()
        {
            return new GuiDataUpdaterDelD_();
        }

        public static void write__(IceInternal.BasicStream os__, GuiDataUpdaterPrx v__)
        {
            os__.writeProxy(v__);
        }

        public static GuiDataUpdaterPrx read__(IceInternal.BasicStream is__)
        {
            Ice.ObjectPrx proxy = is__.readProxy();
            if(proxy != null)
            {
                GuiDataUpdaterPrxHelper result = new GuiDataUpdaterPrxHelper();
                result.copyFrom__(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class GuiDataHubPrxHelper : Ice.ObjectPrxHelperBase, GuiDataHubPrx
    {
        #region Synchronous operations

        public void EraseDataUpdater(MCS.GuiDataUpdaterPrx updater)
        {
            EraseDataUpdater(updater, null, false);
        }

        public void EraseDataUpdater(MCS.GuiDataUpdaterPrx updater, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            EraseDataUpdater(updater, context__, true);
        }

        private void EraseDataUpdater(MCS.GuiDataUpdaterPrx updater, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    delBase__ = getDelegate__(false);
                    GuiDataHubDel_ del__ = (GuiDataHubDel_)delBase__;
                    del__.EraseDataUpdater(updater, context__);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        public string ReadData(MCS.GuiHub.GuiCommand Tag, int session)
        {
            return ReadData(Tag, session, null, false);
        }

        public string ReadData(MCS.GuiHub.GuiCommand Tag, int session, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return ReadData(Tag, session, context__, true);
        }

        private string ReadData(MCS.GuiHub.GuiCommand Tag, int session, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("ReadData");
                    delBase__ = getDelegate__(false);
                    GuiDataHubDel_ del__ = (GuiDataHubDel_)delBase__;
                    return del__.ReadData(Tag, session, context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        public void SetDataUpdater(MCS.GuiDataUpdaterPrx updater)
        {
            SetDataUpdater(updater, null, false);
        }

        public void SetDataUpdater(MCS.GuiDataUpdaterPrx updater, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            SetDataUpdater(updater, context__, true);
        }

        private void SetDataUpdater(MCS.GuiDataUpdaterPrx updater, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    delBase__ = getDelegate__(false);
                    GuiDataHubDel_ del__ = (GuiDataHubDel_)delBase__;
                    del__.SetDataUpdater(updater, context__);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        public int SetPushCmd(MCS.GuiDataUpdaterPrx updater, MCS.GuiHub.PushData[] list, int session)
        {
            return SetPushCmd(updater, list, session, null, false);
        }

        public int SetPushCmd(MCS.GuiDataUpdaterPrx updater, MCS.GuiHub.PushData[] list, int session, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return SetPushCmd(updater, list, session, context__, true);
        }

        private int SetPushCmd(MCS.GuiDataUpdaterPrx updater, MCS.GuiHub.PushData[] list, int session, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("SetPushCmd");
                    delBase__ = getDelegate__(false);
                    GuiDataHubDel_ del__ = (GuiDataHubDel_)delBase__;
                    return del__.SetPushCmd(updater, list, session, context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        public int SetPushTimer(int period, int session)
        {
            return SetPushTimer(period, session, null, false);
        }

        public int SetPushTimer(int period, int session, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return SetPushTimer(period, session, context__, true);
        }

        private int SetPushTimer(int period, int session, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("SetPushTimer");
                    delBase__ = getDelegate__(false);
                    GuiDataHubDel_ del__ = (GuiDataHubDel_)delBase__;
                    return del__.SetPushTimer(period, session, context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        public int WriteData(MCS.GuiHub.GuiCommand Tag, string Val, int session)
        {
            return WriteData(Tag, Val, session, null, false);
        }

        public int WriteData(MCS.GuiHub.GuiCommand Tag, string Val, int session, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return WriteData(Tag, Val, session, context__, true);
        }

        private int WriteData(MCS.GuiHub.GuiCommand Tag, string Val, int session, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("WriteData");
                    delBase__ = getDelegate__(false);
                    GuiDataHubDel_ del__ = (GuiDataHubDel_)delBase__;
                    return del__.WriteData(Tag, Val, session, context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        #endregion

        #region Asynchronous operations

        public Ice.AsyncResult<MCS.Callback_GuiDataHub_EraseDataUpdater> begin_EraseDataUpdater(MCS.GuiDataUpdaterPrx updater)
        {
            return begin_EraseDataUpdater(updater, null, false, null, null);
        }

        public Ice.AsyncResult<MCS.Callback_GuiDataHub_EraseDataUpdater> begin_EraseDataUpdater(MCS.GuiDataUpdaterPrx updater, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_EraseDataUpdater(updater, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_EraseDataUpdater(MCS.GuiDataUpdaterPrx updater, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_EraseDataUpdater(updater, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_EraseDataUpdater(MCS.GuiDataUpdaterPrx updater, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_EraseDataUpdater(updater, ctx__, true, cb__, cookie__);
        }

        private const string __EraseDataUpdater_name = "EraseDataUpdater";

        public void end_EraseDataUpdater(Ice.AsyncResult r__)
        {
            end__(r__, __EraseDataUpdater_name);
        }

        private Ice.AsyncResult<MCS.Callback_GuiDataHub_EraseDataUpdater> begin_EraseDataUpdater(MCS.GuiDataUpdaterPrx updater, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            IceInternal.OnewayOutgoingAsync<MCS.Callback_GuiDataHub_EraseDataUpdater> result__ = new IceInternal.OnewayOutgoingAsync<MCS.Callback_GuiDataHub_EraseDataUpdater>(this, __EraseDataUpdater_name, EraseDataUpdater_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__EraseDataUpdater_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                MCS.GuiDataUpdaterPrxHelper.write__(os__, updater);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void EraseDataUpdater_completed__(MCS.Callback_GuiDataHub_EraseDataUpdater cb__)
        {
            if(cb__ != null)
            {
                cb__();
            }
        }

        public Ice.AsyncResult<MCS.Callback_GuiDataHub_ReadData> begin_ReadData(MCS.GuiHub.GuiCommand Tag, int session)
        {
            return begin_ReadData(Tag, session, null, false, null, null);
        }

        public Ice.AsyncResult<MCS.Callback_GuiDataHub_ReadData> begin_ReadData(MCS.GuiHub.GuiCommand Tag, int session, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_ReadData(Tag, session, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_ReadData(MCS.GuiHub.GuiCommand Tag, int session, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_ReadData(Tag, session, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_ReadData(MCS.GuiHub.GuiCommand Tag, int session, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_ReadData(Tag, session, ctx__, true, cb__, cookie__);
        }

        private const string __ReadData_name = "ReadData";

        public string end_ReadData(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __ReadData_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            string ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            ret__ = is__.readString();
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<MCS.Callback_GuiDataHub_ReadData> begin_ReadData(MCS.GuiHub.GuiCommand Tag, int session, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__ReadData_name);
            IceInternal.TwowayOutgoingAsync<MCS.Callback_GuiDataHub_ReadData> result__ =  new IceInternal.TwowayOutgoingAsync<MCS.Callback_GuiDataHub_ReadData>(this, __ReadData_name, ReadData_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__ReadData_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeByte((byte)Tag, 19);
                os__.writeInt(session);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void ReadData_completed__(Ice.AsyncResult r__, MCS.Callback_GuiDataHub_ReadData cb__, Ice.ExceptionCallback excb__)
        {
            string ret__;
            try
            {
                ret__ = end_ReadData(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<MCS.Callback_GuiDataHub_SetDataUpdater> begin_SetDataUpdater(MCS.GuiDataUpdaterPrx updater)
        {
            return begin_SetDataUpdater(updater, null, false, null, null);
        }

        public Ice.AsyncResult<MCS.Callback_GuiDataHub_SetDataUpdater> begin_SetDataUpdater(MCS.GuiDataUpdaterPrx updater, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_SetDataUpdater(updater, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_SetDataUpdater(MCS.GuiDataUpdaterPrx updater, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_SetDataUpdater(updater, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_SetDataUpdater(MCS.GuiDataUpdaterPrx updater, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_SetDataUpdater(updater, ctx__, true, cb__, cookie__);
        }

        private const string __SetDataUpdater_name = "SetDataUpdater";

        public void end_SetDataUpdater(Ice.AsyncResult r__)
        {
            end__(r__, __SetDataUpdater_name);
        }

        private Ice.AsyncResult<MCS.Callback_GuiDataHub_SetDataUpdater> begin_SetDataUpdater(MCS.GuiDataUpdaterPrx updater, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            IceInternal.OnewayOutgoingAsync<MCS.Callback_GuiDataHub_SetDataUpdater> result__ = new IceInternal.OnewayOutgoingAsync<MCS.Callback_GuiDataHub_SetDataUpdater>(this, __SetDataUpdater_name, SetDataUpdater_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__SetDataUpdater_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                MCS.GuiDataUpdaterPrxHelper.write__(os__, updater);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void SetDataUpdater_completed__(MCS.Callback_GuiDataHub_SetDataUpdater cb__)
        {
            if(cb__ != null)
            {
                cb__();
            }
        }

        public Ice.AsyncResult<MCS.Callback_GuiDataHub_SetPushCmd> begin_SetPushCmd(MCS.GuiDataUpdaterPrx updater, MCS.GuiHub.PushData[] list, int session)
        {
            return begin_SetPushCmd(updater, list, session, null, false, null, null);
        }

        public Ice.AsyncResult<MCS.Callback_GuiDataHub_SetPushCmd> begin_SetPushCmd(MCS.GuiDataUpdaterPrx updater, MCS.GuiHub.PushData[] list, int session, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_SetPushCmd(updater, list, session, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_SetPushCmd(MCS.GuiDataUpdaterPrx updater, MCS.GuiHub.PushData[] list, int session, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_SetPushCmd(updater, list, session, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_SetPushCmd(MCS.GuiDataUpdaterPrx updater, MCS.GuiHub.PushData[] list, int session, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_SetPushCmd(updater, list, session, ctx__, true, cb__, cookie__);
        }

        private const string __SetPushCmd_name = "SetPushCmd";

        public int end_SetPushCmd(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __SetPushCmd_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            int ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            ret__ = is__.readInt();
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<MCS.Callback_GuiDataHub_SetPushCmd> begin_SetPushCmd(MCS.GuiDataUpdaterPrx updater, MCS.GuiHub.PushData[] list, int session, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__SetPushCmd_name);
            IceInternal.TwowayOutgoingAsync<MCS.Callback_GuiDataHub_SetPushCmd> result__ =  new IceInternal.TwowayOutgoingAsync<MCS.Callback_GuiDataHub_SetPushCmd>(this, __SetPushCmd_name, SetPushCmd_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__SetPushCmd_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                MCS.GuiDataUpdaterPrxHelper.write__(os__, updater);
                if(list == null)
                {
                    os__.writeSize(0);
                }
                else
                {
                    os__.writeSize(list.Length);
                    for(int ix__ = 0; ix__ < list.Length; ++ix__)
                    {
                        os__.writeByte((byte)list[ix__], 11);
                    }
                }
                os__.writeInt(session);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void SetPushCmd_completed__(Ice.AsyncResult r__, MCS.Callback_GuiDataHub_SetPushCmd cb__, Ice.ExceptionCallback excb__)
        {
            int ret__;
            try
            {
                ret__ = end_SetPushCmd(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<MCS.Callback_GuiDataHub_SetPushTimer> begin_SetPushTimer(int period, int session)
        {
            return begin_SetPushTimer(period, session, null, false, null, null);
        }

        public Ice.AsyncResult<MCS.Callback_GuiDataHub_SetPushTimer> begin_SetPushTimer(int period, int session, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_SetPushTimer(period, session, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_SetPushTimer(int period, int session, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_SetPushTimer(period, session, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_SetPushTimer(int period, int session, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_SetPushTimer(period, session, ctx__, true, cb__, cookie__);
        }

        private const string __SetPushTimer_name = "SetPushTimer";

        public int end_SetPushTimer(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __SetPushTimer_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            int ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            ret__ = is__.readInt();
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<MCS.Callback_GuiDataHub_SetPushTimer> begin_SetPushTimer(int period, int session, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__SetPushTimer_name);
            IceInternal.TwowayOutgoingAsync<MCS.Callback_GuiDataHub_SetPushTimer> result__ =  new IceInternal.TwowayOutgoingAsync<MCS.Callback_GuiDataHub_SetPushTimer>(this, __SetPushTimer_name, SetPushTimer_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__SetPushTimer_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeInt(period);
                os__.writeInt(session);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void SetPushTimer_completed__(Ice.AsyncResult r__, MCS.Callback_GuiDataHub_SetPushTimer cb__, Ice.ExceptionCallback excb__)
        {
            int ret__;
            try
            {
                ret__ = end_SetPushTimer(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<MCS.Callback_GuiDataHub_WriteData> begin_WriteData(MCS.GuiHub.GuiCommand Tag, string Val, int session)
        {
            return begin_WriteData(Tag, Val, session, null, false, null, null);
        }

        public Ice.AsyncResult<MCS.Callback_GuiDataHub_WriteData> begin_WriteData(MCS.GuiHub.GuiCommand Tag, string Val, int session, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_WriteData(Tag, Val, session, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_WriteData(MCS.GuiHub.GuiCommand Tag, string Val, int session, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_WriteData(Tag, Val, session, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_WriteData(MCS.GuiHub.GuiCommand Tag, string Val, int session, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_WriteData(Tag, Val, session, ctx__, true, cb__, cookie__);
        }

        private const string __WriteData_name = "WriteData";

        public int end_WriteData(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __WriteData_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            int ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            ret__ = is__.readInt();
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<MCS.Callback_GuiDataHub_WriteData> begin_WriteData(MCS.GuiHub.GuiCommand Tag, string Val, int session, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__WriteData_name);
            IceInternal.TwowayOutgoingAsync<MCS.Callback_GuiDataHub_WriteData> result__ =  new IceInternal.TwowayOutgoingAsync<MCS.Callback_GuiDataHub_WriteData>(this, __WriteData_name, WriteData_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__WriteData_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeByte((byte)Tag, 19);
                os__.writeString(Val);
                os__.writeInt(session);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void WriteData_completed__(Ice.AsyncResult r__, MCS.Callback_GuiDataHub_WriteData cb__, Ice.ExceptionCallback excb__)
        {
            int ret__;
            try
            {
                ret__ = end_WriteData(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        #endregion

        #region Checked and unchecked cast operations

        public static GuiDataHubPrx checkedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            GuiDataHubPrx r = b as GuiDataHubPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                GuiDataHubPrxHelper h = new GuiDataHubPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static GuiDataHubPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            GuiDataHubPrx r = b as GuiDataHubPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                GuiDataHubPrxHelper h = new GuiDataHubPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static GuiDataHubPrx checkedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    GuiDataHubPrxHelper h = new GuiDataHubPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static GuiDataHubPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    GuiDataHubPrxHelper h = new GuiDataHubPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static GuiDataHubPrx uncheckedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            GuiDataHubPrx r = b as GuiDataHubPrx;
            if(r == null)
            {
                GuiDataHubPrxHelper h = new GuiDataHubPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static GuiDataHubPrx uncheckedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            GuiDataHubPrxHelper h = new GuiDataHubPrxHelper();
            h.copyFrom__(bb);
            return h;
        }

        public static readonly string[] ids__ =
        {
            "::Ice::Object",
            "::MCS::GuiDataHub"
        };

        public static string ice_staticId()
        {
            return ids__[1];
        }

        #endregion

        #region Marshaling support

        protected override Ice.ObjectDelM_ createDelegateM__()
        {
            return new GuiDataHubDelM_();
        }

        protected override Ice.ObjectDelD_ createDelegateD__()
        {
            return new GuiDataHubDelD_();
        }

        public static void write__(IceInternal.BasicStream os__, GuiDataHubPrx v__)
        {
            os__.writeProxy(v__);
        }

        public static GuiDataHubPrx read__(IceInternal.BasicStream is__)
        {
            Ice.ObjectPrx proxy = is__.readProxy();
            if(proxy != null)
            {
                GuiDataHubPrxHelper result = new GuiDataHubPrxHelper();
                result.copyFrom__(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class UserListHelper
    {
        public static void write(IceInternal.BasicStream os__, MCS.User[] v__)
        {
            if(v__ == null)
            {
                os__.writeSize(0);
            }
            else
            {
                os__.writeSize(v__.Length);
                for(int ix__ = 0; ix__ < v__.Length; ++ix__)
                {
                    (v__[ix__] == null ? new MCS.User() : v__[ix__]).write__(os__);
                }
            }
        }

        public static MCS.User[] read(IceInternal.BasicStream is__)
        {
            MCS.User[] v__;
            {
                int szx__ = is__.readAndCheckSeqSize(9);
                v__ = new MCS.User[szx__];
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    v__[ix__] = new MCS.User();
                    v__[ix__].read__(is__);
                }
            }
            return v__;
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class UserManagementPrxHelper : Ice.ObjectPrxHelperBase, UserManagementPrx
    {
        #region Synchronous operations

        public int CreateUser(string user, string pass, int nRight, int session)
        {
            return CreateUser(user, pass, nRight, session, null, false);
        }

        public int CreateUser(string user, string pass, int nRight, int session, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return CreateUser(user, pass, nRight, session, context__, true);
        }

        private int CreateUser(string user, string pass, int nRight, int session, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("CreateUser");
                    delBase__ = getDelegate__(false);
                    UserManagementDel_ del__ = (UserManagementDel_)delBase__;
                    return del__.CreateUser(user, pass, nRight, session, context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        public int DeleteUser(int nUID, int session)
        {
            return DeleteUser(nUID, session, null, false);
        }

        public int DeleteUser(int nUID, int session, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return DeleteUser(nUID, session, context__, true);
        }

        private int DeleteUser(int nUID, int session, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("DeleteUser");
                    delBase__ = getDelegate__(false);
                    UserManagementDel_ del__ = (UserManagementDel_)delBase__;
                    return del__.DeleteUser(nUID, session, context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        public int GetUserCount(int session)
        {
            return GetUserCount(session, null, false);
        }

        public int GetUserCount(int session, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return GetUserCount(session, context__, true);
        }

        private int GetUserCount(int session, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("GetUserCount");
                    delBase__ = getDelegate__(false);
                    UserManagementDel_ del__ = (UserManagementDel_)delBase__;
                    return del__.GetUserCount(session, context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        public MCS.User[] GetUserList(int nBegin, int nCount, int session)
        {
            return GetUserList(nBegin, nCount, session, null, false);
        }

        public MCS.User[] GetUserList(int nBegin, int nCount, int session, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return GetUserList(nBegin, nCount, session, context__, true);
        }

        private MCS.User[] GetUserList(int nBegin, int nCount, int session, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("GetUserList");
                    delBase__ = getDelegate__(false);
                    UserManagementDel_ del__ = (UserManagementDel_)delBase__;
                    return del__.GetUserList(nBegin, nCount, session, context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        public int Login(string user, string pass)
        {
            return Login(user, pass, null, false);
        }

        public int Login(string user, string pass, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return Login(user, pass, context__, true);
        }

        private int Login(string user, string pass, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("Login");
                    delBase__ = getDelegate__(false);
                    UserManagementDel_ del__ = (UserManagementDel_)delBase__;
                    return del__.Login(user, pass, context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        public int Logout(int session)
        {
            return Logout(session, null, false);
        }

        public int Logout(int session, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return Logout(session, context__, true);
        }

        private int Logout(int session, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("Logout");
                    delBase__ = getDelegate__(false);
                    UserManagementDel_ del__ = (UserManagementDel_)delBase__;
                    return del__.Logout(session, context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        public int SetUserPW(int nUID, string pass, int session)
        {
            return SetUserPW(nUID, pass, session, null, false);
        }

        public int SetUserPW(int nUID, string pass, int session, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return SetUserPW(nUID, pass, session, context__, true);
        }

        private int SetUserPW(int nUID, string pass, int session, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("SetUserPW");
                    delBase__ = getDelegate__(false);
                    UserManagementDel_ del__ = (UserManagementDel_)delBase__;
                    return del__.SetUserPW(nUID, pass, session, context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        public int SetUserRight(int nUID, int nRight, int session)
        {
            return SetUserRight(nUID, nRight, session, null, false);
        }

        public int SetUserRight(int nUID, int nRight, int session, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return SetUserRight(nUID, nRight, session, context__, true);
        }

        private int SetUserRight(int nUID, int nRight, int session, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("SetUserRight");
                    delBase__ = getDelegate__(false);
                    UserManagementDel_ del__ = (UserManagementDel_)delBase__;
                    return del__.SetUserRight(nUID, nRight, session, context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        #endregion

        #region Asynchronous operations

        public Ice.AsyncResult<MCS.Callback_UserManagement_CreateUser> begin_CreateUser(string user, string pass, int nRight, int session)
        {
            return begin_CreateUser(user, pass, nRight, session, null, false, null, null);
        }

        public Ice.AsyncResult<MCS.Callback_UserManagement_CreateUser> begin_CreateUser(string user, string pass, int nRight, int session, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_CreateUser(user, pass, nRight, session, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_CreateUser(string user, string pass, int nRight, int session, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_CreateUser(user, pass, nRight, session, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_CreateUser(string user, string pass, int nRight, int session, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_CreateUser(user, pass, nRight, session, ctx__, true, cb__, cookie__);
        }

        private const string __CreateUser_name = "CreateUser";

        public int end_CreateUser(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __CreateUser_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            int ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            ret__ = is__.readInt();
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<MCS.Callback_UserManagement_CreateUser> begin_CreateUser(string user, string pass, int nRight, int session, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__CreateUser_name);
            IceInternal.TwowayOutgoingAsync<MCS.Callback_UserManagement_CreateUser> result__ =  new IceInternal.TwowayOutgoingAsync<MCS.Callback_UserManagement_CreateUser>(this, __CreateUser_name, CreateUser_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__CreateUser_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeString(user);
                os__.writeString(pass);
                os__.writeInt(nRight);
                os__.writeInt(session);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void CreateUser_completed__(Ice.AsyncResult r__, MCS.Callback_UserManagement_CreateUser cb__, Ice.ExceptionCallback excb__)
        {
            int ret__;
            try
            {
                ret__ = end_CreateUser(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<MCS.Callback_UserManagement_DeleteUser> begin_DeleteUser(int nUID, int session)
        {
            return begin_DeleteUser(nUID, session, null, false, null, null);
        }

        public Ice.AsyncResult<MCS.Callback_UserManagement_DeleteUser> begin_DeleteUser(int nUID, int session, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_DeleteUser(nUID, session, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_DeleteUser(int nUID, int session, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_DeleteUser(nUID, session, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_DeleteUser(int nUID, int session, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_DeleteUser(nUID, session, ctx__, true, cb__, cookie__);
        }

        private const string __DeleteUser_name = "DeleteUser";

        public int end_DeleteUser(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __DeleteUser_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            int ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            ret__ = is__.readInt();
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<MCS.Callback_UserManagement_DeleteUser> begin_DeleteUser(int nUID, int session, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__DeleteUser_name);
            IceInternal.TwowayOutgoingAsync<MCS.Callback_UserManagement_DeleteUser> result__ =  new IceInternal.TwowayOutgoingAsync<MCS.Callback_UserManagement_DeleteUser>(this, __DeleteUser_name, DeleteUser_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__DeleteUser_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeInt(nUID);
                os__.writeInt(session);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void DeleteUser_completed__(Ice.AsyncResult r__, MCS.Callback_UserManagement_DeleteUser cb__, Ice.ExceptionCallback excb__)
        {
            int ret__;
            try
            {
                ret__ = end_DeleteUser(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<MCS.Callback_UserManagement_GetUserCount> begin_GetUserCount(int session)
        {
            return begin_GetUserCount(session, null, false, null, null);
        }

        public Ice.AsyncResult<MCS.Callback_UserManagement_GetUserCount> begin_GetUserCount(int session, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_GetUserCount(session, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_GetUserCount(int session, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetUserCount(session, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_GetUserCount(int session, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetUserCount(session, ctx__, true, cb__, cookie__);
        }

        private const string __GetUserCount_name = "GetUserCount";

        public int end_GetUserCount(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __GetUserCount_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            int ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            ret__ = is__.readInt();
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<MCS.Callback_UserManagement_GetUserCount> begin_GetUserCount(int session, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__GetUserCount_name);
            IceInternal.TwowayOutgoingAsync<MCS.Callback_UserManagement_GetUserCount> result__ =  new IceInternal.TwowayOutgoingAsync<MCS.Callback_UserManagement_GetUserCount>(this, __GetUserCount_name, GetUserCount_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__GetUserCount_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeInt(session);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void GetUserCount_completed__(Ice.AsyncResult r__, MCS.Callback_UserManagement_GetUserCount cb__, Ice.ExceptionCallback excb__)
        {
            int ret__;
            try
            {
                ret__ = end_GetUserCount(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<MCS.Callback_UserManagement_GetUserList> begin_GetUserList(int nBegin, int nCount, int session)
        {
            return begin_GetUserList(nBegin, nCount, session, null, false, null, null);
        }

        public Ice.AsyncResult<MCS.Callback_UserManagement_GetUserList> begin_GetUserList(int nBegin, int nCount, int session, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_GetUserList(nBegin, nCount, session, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_GetUserList(int nBegin, int nCount, int session, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetUserList(nBegin, nCount, session, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_GetUserList(int nBegin, int nCount, int session, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetUserList(nBegin, nCount, session, ctx__, true, cb__, cookie__);
        }

        private const string __GetUserList_name = "GetUserList";

        public MCS.User[] end_GetUserList(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __GetUserList_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            MCS.User[] ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            {
                int szx__ = is__.readAndCheckSeqSize(9);
                ret__ = new MCS.User[szx__];
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    ret__[ix__] = new MCS.User();
                    ret__[ix__].read__(is__);
                }
            }
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<MCS.Callback_UserManagement_GetUserList> begin_GetUserList(int nBegin, int nCount, int session, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__GetUserList_name);
            IceInternal.TwowayOutgoingAsync<MCS.Callback_UserManagement_GetUserList> result__ =  new IceInternal.TwowayOutgoingAsync<MCS.Callback_UserManagement_GetUserList>(this, __GetUserList_name, GetUserList_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__GetUserList_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeInt(nBegin);
                os__.writeInt(nCount);
                os__.writeInt(session);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void GetUserList_completed__(Ice.AsyncResult r__, MCS.Callback_UserManagement_GetUserList cb__, Ice.ExceptionCallback excb__)
        {
            MCS.User[] ret__;
            try
            {
                ret__ = end_GetUserList(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<MCS.Callback_UserManagement_Login> begin_Login(string user, string pass)
        {
            return begin_Login(user, pass, null, false, null, null);
        }

        public Ice.AsyncResult<MCS.Callback_UserManagement_Login> begin_Login(string user, string pass, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_Login(user, pass, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_Login(string user, string pass, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_Login(user, pass, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_Login(string user, string pass, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_Login(user, pass, ctx__, true, cb__, cookie__);
        }

        private const string __Login_name = "Login";

        public int end_Login(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __Login_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            int ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            ret__ = is__.readInt();
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<MCS.Callback_UserManagement_Login> begin_Login(string user, string pass, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__Login_name);
            IceInternal.TwowayOutgoingAsync<MCS.Callback_UserManagement_Login> result__ =  new IceInternal.TwowayOutgoingAsync<MCS.Callback_UserManagement_Login>(this, __Login_name, Login_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__Login_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeString(user);
                os__.writeString(pass);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void Login_completed__(Ice.AsyncResult r__, MCS.Callback_UserManagement_Login cb__, Ice.ExceptionCallback excb__)
        {
            int ret__;
            try
            {
                ret__ = end_Login(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<MCS.Callback_UserManagement_Logout> begin_Logout(int session)
        {
            return begin_Logout(session, null, false, null, null);
        }

        public Ice.AsyncResult<MCS.Callback_UserManagement_Logout> begin_Logout(int session, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_Logout(session, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_Logout(int session, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_Logout(session, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_Logout(int session, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_Logout(session, ctx__, true, cb__, cookie__);
        }

        private const string __Logout_name = "Logout";

        public int end_Logout(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __Logout_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            int ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            ret__ = is__.readInt();
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<MCS.Callback_UserManagement_Logout> begin_Logout(int session, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__Logout_name);
            IceInternal.TwowayOutgoingAsync<MCS.Callback_UserManagement_Logout> result__ =  new IceInternal.TwowayOutgoingAsync<MCS.Callback_UserManagement_Logout>(this, __Logout_name, Logout_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__Logout_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeInt(session);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void Logout_completed__(Ice.AsyncResult r__, MCS.Callback_UserManagement_Logout cb__, Ice.ExceptionCallback excb__)
        {
            int ret__;
            try
            {
                ret__ = end_Logout(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<MCS.Callback_UserManagement_SetUserPW> begin_SetUserPW(int nUID, string pass, int session)
        {
            return begin_SetUserPW(nUID, pass, session, null, false, null, null);
        }

        public Ice.AsyncResult<MCS.Callback_UserManagement_SetUserPW> begin_SetUserPW(int nUID, string pass, int session, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_SetUserPW(nUID, pass, session, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_SetUserPW(int nUID, string pass, int session, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_SetUserPW(nUID, pass, session, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_SetUserPW(int nUID, string pass, int session, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_SetUserPW(nUID, pass, session, ctx__, true, cb__, cookie__);
        }

        private const string __SetUserPW_name = "SetUserPW";

        public int end_SetUserPW(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __SetUserPW_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            int ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            ret__ = is__.readInt();
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<MCS.Callback_UserManagement_SetUserPW> begin_SetUserPW(int nUID, string pass, int session, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__SetUserPW_name);
            IceInternal.TwowayOutgoingAsync<MCS.Callback_UserManagement_SetUserPW> result__ =  new IceInternal.TwowayOutgoingAsync<MCS.Callback_UserManagement_SetUserPW>(this, __SetUserPW_name, SetUserPW_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__SetUserPW_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeInt(nUID);
                os__.writeString(pass);
                os__.writeInt(session);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void SetUserPW_completed__(Ice.AsyncResult r__, MCS.Callback_UserManagement_SetUserPW cb__, Ice.ExceptionCallback excb__)
        {
            int ret__;
            try
            {
                ret__ = end_SetUserPW(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<MCS.Callback_UserManagement_SetUserRight> begin_SetUserRight(int nUID, int nRight, int session)
        {
            return begin_SetUserRight(nUID, nRight, session, null, false, null, null);
        }

        public Ice.AsyncResult<MCS.Callback_UserManagement_SetUserRight> begin_SetUserRight(int nUID, int nRight, int session, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_SetUserRight(nUID, nRight, session, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_SetUserRight(int nUID, int nRight, int session, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_SetUserRight(nUID, nRight, session, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_SetUserRight(int nUID, int nRight, int session, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_SetUserRight(nUID, nRight, session, ctx__, true, cb__, cookie__);
        }

        private const string __SetUserRight_name = "SetUserRight";

        public int end_SetUserRight(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __SetUserRight_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            int ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            ret__ = is__.readInt();
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<MCS.Callback_UserManagement_SetUserRight> begin_SetUserRight(int nUID, int nRight, int session, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__SetUserRight_name);
            IceInternal.TwowayOutgoingAsync<MCS.Callback_UserManagement_SetUserRight> result__ =  new IceInternal.TwowayOutgoingAsync<MCS.Callback_UserManagement_SetUserRight>(this, __SetUserRight_name, SetUserRight_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__SetUserRight_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeInt(nUID);
                os__.writeInt(nRight);
                os__.writeInt(session);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void SetUserRight_completed__(Ice.AsyncResult r__, MCS.Callback_UserManagement_SetUserRight cb__, Ice.ExceptionCallback excb__)
        {
            int ret__;
            try
            {
                ret__ = end_SetUserRight(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        #endregion

        #region Checked and unchecked cast operations

        public static UserManagementPrx checkedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            UserManagementPrx r = b as UserManagementPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                UserManagementPrxHelper h = new UserManagementPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static UserManagementPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            UserManagementPrx r = b as UserManagementPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                UserManagementPrxHelper h = new UserManagementPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static UserManagementPrx checkedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    UserManagementPrxHelper h = new UserManagementPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static UserManagementPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    UserManagementPrxHelper h = new UserManagementPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static UserManagementPrx uncheckedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            UserManagementPrx r = b as UserManagementPrx;
            if(r == null)
            {
                UserManagementPrxHelper h = new UserManagementPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static UserManagementPrx uncheckedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            UserManagementPrxHelper h = new UserManagementPrxHelper();
            h.copyFrom__(bb);
            return h;
        }

        public static readonly string[] ids__ =
        {
            "::Ice::Object",
            "::MCS::UserManagement"
        };

        public static string ice_staticId()
        {
            return ids__[1];
        }

        #endregion

        #region Marshaling support

        protected override Ice.ObjectDelM_ createDelegateM__()
        {
            return new UserManagementDelM_();
        }

        protected override Ice.ObjectDelD_ createDelegateD__()
        {
            return new UserManagementDelD_();
        }

        public static void write__(IceInternal.BasicStream os__, UserManagementPrx v__)
        {
            os__.writeProxy(v__);
        }

        public static UserManagementPrx read__(IceInternal.BasicStream is__)
        {
            Ice.ObjectPrx proxy = is__.readProxy();
            if(proxy != null)
            {
                UserManagementPrxHelper result = new UserManagementPrxHelper();
                result.copyFrom__(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace MCS
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface GuiDataUpdaterDel_ : Ice.ObjectDel_
    {
        void UpdateData(long time, MCS.GuiDataItem data, _System.Collections.Generic.Dictionary<string, string> context__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface GuiDataHubDel_ : Ice.ObjectDel_
    {
        int SetPushCmd(MCS.GuiDataUpdaterPrx updater, MCS.GuiHub.PushData[] list, int session, _System.Collections.Generic.Dictionary<string, string> context__);

        int SetPushTimer(int period, int session, _System.Collections.Generic.Dictionary<string, string> context__);

        string ReadData(MCS.GuiHub.GuiCommand Tag, int session, _System.Collections.Generic.Dictionary<string, string> context__);

        int WriteData(MCS.GuiHub.GuiCommand Tag, string Val, int session, _System.Collections.Generic.Dictionary<string, string> context__);

        void SetDataUpdater(MCS.GuiDataUpdaterPrx updater, _System.Collections.Generic.Dictionary<string, string> context__);

        void EraseDataUpdater(MCS.GuiDataUpdaterPrx updater, _System.Collections.Generic.Dictionary<string, string> context__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface UserManagementDel_ : Ice.ObjectDel_
    {
        int Login(string user, string pass, _System.Collections.Generic.Dictionary<string, string> context__);

        int Logout(int session, _System.Collections.Generic.Dictionary<string, string> context__);

        int CreateUser(string user, string pass, int nRight, int session, _System.Collections.Generic.Dictionary<string, string> context__);

        int SetUserPW(int nUID, string pass, int session, _System.Collections.Generic.Dictionary<string, string> context__);

        int SetUserRight(int nUID, int nRight, int session, _System.Collections.Generic.Dictionary<string, string> context__);

        int DeleteUser(int nUID, int session, _System.Collections.Generic.Dictionary<string, string> context__);

        int GetUserCount(int session, _System.Collections.Generic.Dictionary<string, string> context__);

        MCS.User[] GetUserList(int nBegin, int nCount, int session, _System.Collections.Generic.Dictionary<string, string> context__);
    }
}

namespace MCS
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class GuiDataUpdaterDelM_ : Ice.ObjectDelM_, GuiDataUpdaterDel_
    {
        public void UpdateData(long time, MCS.GuiDataItem data, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("UpdateData", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeLong(time);
                    if(data == null)
                    {
                        MCS.GuiDataItem tmp__ = new MCS.GuiDataItem();
                        tmp__.write__(os__);
                    }
                    else
                    {
                        data.write__(os__);
                    }
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                if(!og__.istr().isEmpty())
                {
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                og__.throwUserException();
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        og__.istr().skipEmptyEncaps();
                    }
                    catch(Ice.LocalException ex__)
                    {
                        throw new IceInternal.LocalExceptionWrapper(ex__, false);
                    }
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class GuiDataHubDelM_ : Ice.ObjectDelM_, GuiDataHubDel_
    {
        public void EraseDataUpdater(MCS.GuiDataUpdaterPrx updater, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("EraseDataUpdater", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    MCS.GuiDataUpdaterPrxHelper.write__(os__, updater);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                if(!og__.istr().isEmpty())
                {
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                og__.throwUserException();
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        og__.istr().skipEmptyEncaps();
                    }
                    catch(Ice.LocalException ex__)
                    {
                        throw new IceInternal.LocalExceptionWrapper(ex__, false);
                    }
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public string ReadData(MCS.GuiHub.GuiCommand Tag, int session, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("ReadData", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeByte((byte)Tag, 19);
                    os__.writeInt(session);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    string ret__;
                    ret__ = is__.readString();
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void SetDataUpdater(MCS.GuiDataUpdaterPrx updater, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("SetDataUpdater", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    MCS.GuiDataUpdaterPrxHelper.write__(os__, updater);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                if(!og__.istr().isEmpty())
                {
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                og__.throwUserException();
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        og__.istr().skipEmptyEncaps();
                    }
                    catch(Ice.LocalException ex__)
                    {
                        throw new IceInternal.LocalExceptionWrapper(ex__, false);
                    }
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public int SetPushCmd(MCS.GuiDataUpdaterPrx updater, MCS.GuiHub.PushData[] list, int session, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("SetPushCmd", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    MCS.GuiDataUpdaterPrxHelper.write__(os__, updater);
                    if(list == null)
                    {
                        os__.writeSize(0);
                    }
                    else
                    {
                        os__.writeSize(list.Length);
                        for(int ix__ = 0; ix__ < list.Length; ++ix__)
                        {
                            os__.writeByte((byte)list[ix__], 11);
                        }
                    }
                    os__.writeInt(session);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    int ret__;
                    ret__ = is__.readInt();
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public int SetPushTimer(int period, int session, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("SetPushTimer", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeInt(period);
                    os__.writeInt(session);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    int ret__;
                    ret__ = is__.readInt();
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public int WriteData(MCS.GuiHub.GuiCommand Tag, string Val, int session, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("WriteData", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeByte((byte)Tag, 19);
                    os__.writeString(Val);
                    os__.writeInt(session);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    int ret__;
                    ret__ = is__.readInt();
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class UserManagementDelM_ : Ice.ObjectDelM_, UserManagementDel_
    {
        public int CreateUser(string user, string pass, int nRight, int session, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("CreateUser", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeString(user);
                    os__.writeString(pass);
                    os__.writeInt(nRight);
                    os__.writeInt(session);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    int ret__;
                    ret__ = is__.readInt();
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public int DeleteUser(int nUID, int session, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("DeleteUser", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeInt(nUID);
                    os__.writeInt(session);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    int ret__;
                    ret__ = is__.readInt();
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public int GetUserCount(int session, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("GetUserCount", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeInt(session);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    int ret__;
                    ret__ = is__.readInt();
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public MCS.User[] GetUserList(int nBegin, int nCount, int session, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("GetUserList", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeInt(nBegin);
                    os__.writeInt(nCount);
                    os__.writeInt(session);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    MCS.User[] ret__;
                    {
                        int szx__ = is__.readAndCheckSeqSize(9);
                        ret__ = new MCS.User[szx__];
                        for(int ix__ = 0; ix__ < szx__; ++ix__)
                        {
                            ret__[ix__] = new MCS.User();
                            ret__[ix__].read__(is__);
                        }
                    }
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public int Login(string user, string pass, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("Login", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeString(user);
                    os__.writeString(pass);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    int ret__;
                    ret__ = is__.readInt();
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public int Logout(int session, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("Logout", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeInt(session);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    int ret__;
                    ret__ = is__.readInt();
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public int SetUserPW(int nUID, string pass, int session, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("SetUserPW", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeInt(nUID);
                    os__.writeString(pass);
                    os__.writeInt(session);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    int ret__;
                    ret__ = is__.readInt();
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public int SetUserRight(int nUID, int nRight, int session, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("SetUserRight", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeInt(nUID);
                    os__.writeInt(nRight);
                    os__.writeInt(session);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    int ret__;
                    ret__ = is__.readInt();
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }
    }
}

namespace MCS
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class GuiDataUpdaterDelD_ : Ice.ObjectDelD_, GuiDataUpdaterDel_
    {
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void UpdateData(long time, MCS.GuiDataItem data, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            throw new Ice.CollocationOptimizationException();
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class GuiDataHubDelD_ : Ice.ObjectDelD_, GuiDataHubDel_
    {
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void EraseDataUpdater(MCS.GuiDataUpdaterPrx updater, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "EraseDataUpdater", Ice.OperationMode.Idempotent, context__);
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                GuiDataHub servant__ = null;
                try
                {
                    servant__ = (GuiDataHub)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                servant__.EraseDataUpdater(updater, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public string ReadData(MCS.GuiHub.GuiCommand Tag, int session, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "ReadData", Ice.OperationMode.Idempotent, context__);
            string result__ = null;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                GuiDataHub servant__ = null;
                try
                {
                    servant__ = (GuiDataHub)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.ReadData(Tag, session, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void SetDataUpdater(MCS.GuiDataUpdaterPrx updater, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "SetDataUpdater", Ice.OperationMode.Idempotent, context__);
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                GuiDataHub servant__ = null;
                try
                {
                    servant__ = (GuiDataHub)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                servant__.SetDataUpdater(updater, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public int SetPushCmd(MCS.GuiDataUpdaterPrx updater, MCS.GuiHub.PushData[] list, int session, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "SetPushCmd", Ice.OperationMode.Idempotent, context__);
            int result__ = 0;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                GuiDataHub servant__ = null;
                try
                {
                    servant__ = (GuiDataHub)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.SetPushCmd(updater, list, session, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public int SetPushTimer(int period, int session, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "SetPushTimer", Ice.OperationMode.Idempotent, context__);
            int result__ = 0;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                GuiDataHub servant__ = null;
                try
                {
                    servant__ = (GuiDataHub)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.SetPushTimer(period, session, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public int WriteData(MCS.GuiHub.GuiCommand Tag, string Val, int session, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "WriteData", Ice.OperationMode.Idempotent, context__);
            int result__ = 0;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                GuiDataHub servant__ = null;
                try
                {
                    servant__ = (GuiDataHub)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.WriteData(Tag, Val, session, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            return result__;
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class UserManagementDelD_ : Ice.ObjectDelD_, UserManagementDel_
    {
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public int CreateUser(string user, string pass, int nRight, int session, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "CreateUser", Ice.OperationMode.Idempotent, context__);
            int result__ = 0;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                UserManagement servant__ = null;
                try
                {
                    servant__ = (UserManagement)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.CreateUser(user, pass, nRight, session, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public int DeleteUser(int nUID, int session, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "DeleteUser", Ice.OperationMode.Idempotent, context__);
            int result__ = 0;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                UserManagement servant__ = null;
                try
                {
                    servant__ = (UserManagement)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.DeleteUser(nUID, session, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public int GetUserCount(int session, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "GetUserCount", Ice.OperationMode.Idempotent, context__);
            int result__ = 0;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                UserManagement servant__ = null;
                try
                {
                    servant__ = (UserManagement)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.GetUserCount(session, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public MCS.User[] GetUserList(int nBegin, int nCount, int session, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "GetUserList", Ice.OperationMode.Idempotent, context__);
            MCS.User[] result__ = null;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                UserManagement servant__ = null;
                try
                {
                    servant__ = (UserManagement)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.GetUserList(nBegin, nCount, session, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public int Login(string user, string pass, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "Login", Ice.OperationMode.Idempotent, context__);
            int result__ = 0;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                UserManagement servant__ = null;
                try
                {
                    servant__ = (UserManagement)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.Login(user, pass, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public int Logout(int session, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "Logout", Ice.OperationMode.Idempotent, context__);
            int result__ = 0;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                UserManagement servant__ = null;
                try
                {
                    servant__ = (UserManagement)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.Logout(session, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public int SetUserPW(int nUID, string pass, int session, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "SetUserPW", Ice.OperationMode.Idempotent, context__);
            int result__ = 0;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                UserManagement servant__ = null;
                try
                {
                    servant__ = (UserManagement)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.SetUserPW(nUID, pass, session, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public int SetUserRight(int nUID, int nRight, int session, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "SetUserRight", Ice.OperationMode.Idempotent, context__);
            int result__ = 0;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                UserManagement servant__ = null;
                try
                {
                    servant__ = (UserManagement)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.SetUserRight(nUID, nRight, session, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            return result__;
        }
    }
}

namespace MCS
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public abstract class GuiDataUpdaterDisp_ : Ice.ObjectImpl, GuiDataUpdater
    {
        #region Slice operations

        public void UpdateData_async(MCS.AMD_GuiDataUpdater_UpdateData cb__, long time, MCS.GuiDataItem data)
        {
            UpdateData_async(cb__, time, data, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void UpdateData_async(MCS.AMD_GuiDataUpdater_UpdateData cb__, long time, MCS.GuiDataItem data, Ice.Current current__);

        #endregion

        #region Slice type-related members

        public static new readonly string[] ids__ = 
        {
            "::Ice::Object",
            "::MCS::GuiDataUpdater"
        };

        public override bool ice_isA(string s)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override bool ice_isA(string s, Ice.Current current__)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids()
        {
            return ids__;
        }

        public override string[] ice_ids(Ice.Current current__)
        {
            return ids__;
        }

        public override string ice_id()
        {
            return ids__[1];
        }

        public override string ice_id(Ice.Current current__)
        {
            return ids__[1];
        }

        public static new string ice_staticId()
        {
            return ids__[1];
        }

        #endregion

        #region Operation dispatch

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus UpdateData___(GuiDataUpdater obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            long time;
            time = is__.readLong();
            MCS.GuiDataItem data;
            data = null;
            if(data == null)
            {
                data = new MCS.GuiDataItem();
            }
            data.read__(is__);
            is__.endReadEncaps();
            AMD_GuiDataUpdater_UpdateData cb__ = new _AMD_GuiDataUpdater_UpdateData(inS__);
            try
            {
                obj__.UpdateData_async(cb__, time, data, current__);
            }
            catch(_System.Exception ex__)
            {
                cb__.ice_exception(ex__);
            }
            return Ice.DispatchStatus.DispatchAsync;
        }

        private static string[] all__ =
        {
            "UpdateData",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override Ice.DispatchStatus dispatch__(IceInternal.Incoming inS__, Ice.Current current__)
        {
            int pos = _System.Array.BinarySearch(all__, current__.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return UpdateData___(this, inS__, current__);
                }
                case 1:
                {
                    return ice_id___(this, inS__, current__);
                }
                case 2:
                {
                    return ice_ids___(this, inS__, current__);
                }
                case 3:
                {
                    return ice_isA___(this, inS__, current__);
                }
                case 4:
                {
                    return ice_ping___(this, inS__, current__);
                }
            }

            _System.Diagnostics.Debug.Assert(false);
            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
        }

        #endregion

        #region Marshaling support

        public override void write__(IceInternal.BasicStream os__)
        {
            os__.writeTypeId(ice_staticId());
            os__.startWriteSlice();
            os__.endWriteSlice();
            base.write__(os__);
        }

        public override void read__(IceInternal.BasicStream is__, bool rid__)
        {
            if(rid__)
            {
                /* string myId = */ is__.readTypeId();
            }
            is__.startReadSlice();
            is__.endReadSlice();
            base.read__(is__, true);
        }

        public override void write__(Ice.OutputStream outS__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "type MCS::GuiDataUpdater was not generated with stream support";
            throw ex;
        }

        public override void read__(Ice.InputStream inS__, bool rid__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "type MCS::GuiDataUpdater was not generated with stream support";
            throw ex;
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public abstract class GuiDataHubDisp_ : Ice.ObjectImpl, GuiDataHub
    {
        #region Slice operations

        public int SetPushCmd(MCS.GuiDataUpdaterPrx updater, MCS.GuiHub.PushData[] list, int session)
        {
            return SetPushCmd(updater, list, session, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract int SetPushCmd(MCS.GuiDataUpdaterPrx updater, MCS.GuiHub.PushData[] list, int session, Ice.Current current__);

        public int SetPushTimer(int period, int session)
        {
            return SetPushTimer(period, session, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract int SetPushTimer(int period, int session, Ice.Current current__);

        public string ReadData(MCS.GuiHub.GuiCommand Tag, int session)
        {
            return ReadData(Tag, session, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract string ReadData(MCS.GuiHub.GuiCommand Tag, int session, Ice.Current current__);

        public int WriteData(MCS.GuiHub.GuiCommand Tag, string Val, int session)
        {
            return WriteData(Tag, Val, session, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract int WriteData(MCS.GuiHub.GuiCommand Tag, string Val, int session, Ice.Current current__);

        public void SetDataUpdater(MCS.GuiDataUpdaterPrx updater)
        {
            SetDataUpdater(updater, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void SetDataUpdater(MCS.GuiDataUpdaterPrx updater, Ice.Current current__);

        public void EraseDataUpdater(MCS.GuiDataUpdaterPrx updater)
        {
            EraseDataUpdater(updater, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void EraseDataUpdater(MCS.GuiDataUpdaterPrx updater, Ice.Current current__);

        #endregion

        #region Slice type-related members

        public static new readonly string[] ids__ = 
        {
            "::Ice::Object",
            "::MCS::GuiDataHub"
        };

        public override bool ice_isA(string s)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override bool ice_isA(string s, Ice.Current current__)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids()
        {
            return ids__;
        }

        public override string[] ice_ids(Ice.Current current__)
        {
            return ids__;
        }

        public override string ice_id()
        {
            return ids__[1];
        }

        public override string ice_id(Ice.Current current__)
        {
            return ids__[1];
        }

        public static new string ice_staticId()
        {
            return ids__[1];
        }

        #endregion

        #region Operation dispatch

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus SetPushCmd___(GuiDataHub obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            MCS.GuiDataUpdaterPrx updater;
            updater = MCS.GuiDataUpdaterPrxHelper.read__(is__);
            MCS.GuiHub.PushData[] list;
            {
                int szx__ = is__.readAndCheckSeqSize(1);
                list = new MCS.GuiHub.PushData[szx__];
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    list[ix__] = (MCS.GuiHub.PushData)is__.readByte(11);
                }
            }
            int session;
            session = is__.readInt();
            is__.endReadEncaps();
            IceInternal.BasicStream os__ = inS__.ostr();
            int ret__ = obj__.SetPushCmd(updater, list, session, current__);
            os__.writeInt(ret__);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus SetPushTimer___(GuiDataHub obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            int period;
            period = is__.readInt();
            int session;
            session = is__.readInt();
            is__.endReadEncaps();
            IceInternal.BasicStream os__ = inS__.ostr();
            int ret__ = obj__.SetPushTimer(period, session, current__);
            os__.writeInt(ret__);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus ReadData___(GuiDataHub obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            MCS.GuiHub.GuiCommand Tag;
            Tag = (MCS.GuiHub.GuiCommand)is__.readByte(19);
            int session;
            session = is__.readInt();
            is__.endReadEncaps();
            IceInternal.BasicStream os__ = inS__.ostr();
            string ret__ = obj__.ReadData(Tag, session, current__);
            os__.writeString(ret__);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus WriteData___(GuiDataHub obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            MCS.GuiHub.GuiCommand Tag;
            Tag = (MCS.GuiHub.GuiCommand)is__.readByte(19);
            string Val;
            Val = is__.readString();
            int session;
            session = is__.readInt();
            is__.endReadEncaps();
            IceInternal.BasicStream os__ = inS__.ostr();
            int ret__ = obj__.WriteData(Tag, Val, session, current__);
            os__.writeInt(ret__);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus SetDataUpdater___(GuiDataHub obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            MCS.GuiDataUpdaterPrx updater;
            updater = MCS.GuiDataUpdaterPrxHelper.read__(is__);
            is__.endReadEncaps();
            obj__.SetDataUpdater(updater, current__);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus EraseDataUpdater___(GuiDataHub obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            MCS.GuiDataUpdaterPrx updater;
            updater = MCS.GuiDataUpdaterPrxHelper.read__(is__);
            is__.endReadEncaps();
            obj__.EraseDataUpdater(updater, current__);
            return Ice.DispatchStatus.DispatchOK;
        }

        private static string[] all__ =
        {
            "EraseDataUpdater",
            "ReadData",
            "SetDataUpdater",
            "SetPushCmd",
            "SetPushTimer",
            "WriteData",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override Ice.DispatchStatus dispatch__(IceInternal.Incoming inS__, Ice.Current current__)
        {
            int pos = _System.Array.BinarySearch(all__, current__.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return EraseDataUpdater___(this, inS__, current__);
                }
                case 1:
                {
                    return ReadData___(this, inS__, current__);
                }
                case 2:
                {
                    return SetDataUpdater___(this, inS__, current__);
                }
                case 3:
                {
                    return SetPushCmd___(this, inS__, current__);
                }
                case 4:
                {
                    return SetPushTimer___(this, inS__, current__);
                }
                case 5:
                {
                    return WriteData___(this, inS__, current__);
                }
                case 6:
                {
                    return ice_id___(this, inS__, current__);
                }
                case 7:
                {
                    return ice_ids___(this, inS__, current__);
                }
                case 8:
                {
                    return ice_isA___(this, inS__, current__);
                }
                case 9:
                {
                    return ice_ping___(this, inS__, current__);
                }
            }

            _System.Diagnostics.Debug.Assert(false);
            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
        }

        #endregion

        #region Marshaling support

        public override void write__(IceInternal.BasicStream os__)
        {
            os__.writeTypeId(ice_staticId());
            os__.startWriteSlice();
            os__.endWriteSlice();
            base.write__(os__);
        }

        public override void read__(IceInternal.BasicStream is__, bool rid__)
        {
            if(rid__)
            {
                /* string myId = */ is__.readTypeId();
            }
            is__.startReadSlice();
            is__.endReadSlice();
            base.read__(is__, true);
        }

        public override void write__(Ice.OutputStream outS__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "type MCS::GuiDataHub was not generated with stream support";
            throw ex;
        }

        public override void read__(Ice.InputStream inS__, bool rid__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "type MCS::GuiDataHub was not generated with stream support";
            throw ex;
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public abstract class UserManagementDisp_ : Ice.ObjectImpl, UserManagement
    {
        #region Slice operations

        public int Login(string user, string pass)
        {
            return Login(user, pass, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract int Login(string user, string pass, Ice.Current current__);

        public int Logout(int session)
        {
            return Logout(session, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract int Logout(int session, Ice.Current current__);

        public int CreateUser(string user, string pass, int nRight, int session)
        {
            return CreateUser(user, pass, nRight, session, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract int CreateUser(string user, string pass, int nRight, int session, Ice.Current current__);

        public int SetUserPW(int nUID, string pass, int session)
        {
            return SetUserPW(nUID, pass, session, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract int SetUserPW(int nUID, string pass, int session, Ice.Current current__);

        public int SetUserRight(int nUID, int nRight, int session)
        {
            return SetUserRight(nUID, nRight, session, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract int SetUserRight(int nUID, int nRight, int session, Ice.Current current__);

        public int DeleteUser(int nUID, int session)
        {
            return DeleteUser(nUID, session, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract int DeleteUser(int nUID, int session, Ice.Current current__);

        public int GetUserCount(int session)
        {
            return GetUserCount(session, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract int GetUserCount(int session, Ice.Current current__);

        public MCS.User[] GetUserList(int nBegin, int nCount, int session)
        {
            return GetUserList(nBegin, nCount, session, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract MCS.User[] GetUserList(int nBegin, int nCount, int session, Ice.Current current__);

        #endregion

        #region Slice type-related members

        public static new readonly string[] ids__ = 
        {
            "::Ice::Object",
            "::MCS::UserManagement"
        };

        public override bool ice_isA(string s)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override bool ice_isA(string s, Ice.Current current__)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids()
        {
            return ids__;
        }

        public override string[] ice_ids(Ice.Current current__)
        {
            return ids__;
        }

        public override string ice_id()
        {
            return ids__[1];
        }

        public override string ice_id(Ice.Current current__)
        {
            return ids__[1];
        }

        public static new string ice_staticId()
        {
            return ids__[1];
        }

        #endregion

        #region Operation dispatch

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus Login___(UserManagement obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            string user;
            user = is__.readString();
            string pass;
            pass = is__.readString();
            is__.endReadEncaps();
            IceInternal.BasicStream os__ = inS__.ostr();
            int ret__ = obj__.Login(user, pass, current__);
            os__.writeInt(ret__);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus Logout___(UserManagement obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            int session;
            session = is__.readInt();
            is__.endReadEncaps();
            IceInternal.BasicStream os__ = inS__.ostr();
            int ret__ = obj__.Logout(session, current__);
            os__.writeInt(ret__);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus CreateUser___(UserManagement obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            string user;
            user = is__.readString();
            string pass;
            pass = is__.readString();
            int nRight;
            nRight = is__.readInt();
            int session;
            session = is__.readInt();
            is__.endReadEncaps();
            IceInternal.BasicStream os__ = inS__.ostr();
            int ret__ = obj__.CreateUser(user, pass, nRight, session, current__);
            os__.writeInt(ret__);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus SetUserPW___(UserManagement obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            int nUID;
            nUID = is__.readInt();
            string pass;
            pass = is__.readString();
            int session;
            session = is__.readInt();
            is__.endReadEncaps();
            IceInternal.BasicStream os__ = inS__.ostr();
            int ret__ = obj__.SetUserPW(nUID, pass, session, current__);
            os__.writeInt(ret__);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus SetUserRight___(UserManagement obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            int nUID;
            nUID = is__.readInt();
            int nRight;
            nRight = is__.readInt();
            int session;
            session = is__.readInt();
            is__.endReadEncaps();
            IceInternal.BasicStream os__ = inS__.ostr();
            int ret__ = obj__.SetUserRight(nUID, nRight, session, current__);
            os__.writeInt(ret__);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus DeleteUser___(UserManagement obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            int nUID;
            nUID = is__.readInt();
            int session;
            session = is__.readInt();
            is__.endReadEncaps();
            IceInternal.BasicStream os__ = inS__.ostr();
            int ret__ = obj__.DeleteUser(nUID, session, current__);
            os__.writeInt(ret__);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus GetUserCount___(UserManagement obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            int session;
            session = is__.readInt();
            is__.endReadEncaps();
            IceInternal.BasicStream os__ = inS__.ostr();
            int ret__ = obj__.GetUserCount(session, current__);
            os__.writeInt(ret__);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus GetUserList___(UserManagement obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            int nBegin;
            nBegin = is__.readInt();
            int nCount;
            nCount = is__.readInt();
            int session;
            session = is__.readInt();
            is__.endReadEncaps();
            IceInternal.BasicStream os__ = inS__.ostr();
            MCS.User[] ret__ = obj__.GetUserList(nBegin, nCount, session, current__);
            if(ret__ == null)
            {
                os__.writeSize(0);
            }
            else
            {
                os__.writeSize(ret__.Length);
                for(int ix__ = 0; ix__ < ret__.Length; ++ix__)
                {
                    (ret__[ix__] == null ? new MCS.User() : ret__[ix__]).write__(os__);
                }
            }
            return Ice.DispatchStatus.DispatchOK;
        }

        private static string[] all__ =
        {
            "CreateUser",
            "DeleteUser",
            "GetUserCount",
            "GetUserList",
            "Login",
            "Logout",
            "SetUserPW",
            "SetUserRight",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override Ice.DispatchStatus dispatch__(IceInternal.Incoming inS__, Ice.Current current__)
        {
            int pos = _System.Array.BinarySearch(all__, current__.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return CreateUser___(this, inS__, current__);
                }
                case 1:
                {
                    return DeleteUser___(this, inS__, current__);
                }
                case 2:
                {
                    return GetUserCount___(this, inS__, current__);
                }
                case 3:
                {
                    return GetUserList___(this, inS__, current__);
                }
                case 4:
                {
                    return Login___(this, inS__, current__);
                }
                case 5:
                {
                    return Logout___(this, inS__, current__);
                }
                case 6:
                {
                    return SetUserPW___(this, inS__, current__);
                }
                case 7:
                {
                    return SetUserRight___(this, inS__, current__);
                }
                case 8:
                {
                    return ice_id___(this, inS__, current__);
                }
                case 9:
                {
                    return ice_ids___(this, inS__, current__);
                }
                case 10:
                {
                    return ice_isA___(this, inS__, current__);
                }
                case 11:
                {
                    return ice_ping___(this, inS__, current__);
                }
            }

            _System.Diagnostics.Debug.Assert(false);
            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
        }

        #endregion

        #region Marshaling support

        public override void write__(IceInternal.BasicStream os__)
        {
            os__.writeTypeId(ice_staticId());
            os__.startWriteSlice();
            os__.endWriteSlice();
            base.write__(os__);
        }

        public override void read__(IceInternal.BasicStream is__, bool rid__)
        {
            if(rid__)
            {
                /* string myId = */ is__.readTypeId();
            }
            is__.startReadSlice();
            is__.endReadSlice();
            base.read__(is__, true);
        }

        public override void write__(Ice.OutputStream outS__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "type MCS::UserManagement was not generated with stream support";
            throw ex;
        }

        public override void read__(Ice.InputStream inS__, bool rid__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "type MCS::UserManagement was not generated with stream support";
            throw ex;
        }

        #endregion
    }
}

namespace MCS
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public abstract class AMI_GuiDataUpdater_UpdateData : Ice.AMICallbackBase
    {
        public abstract void ice_response();

        public void response__()
        {
            ice_response();
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface AMD_GuiDataUpdater_UpdateData : Ice.AMDCallback
    {
        void ice_response();
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    class _AMD_GuiDataUpdater_UpdateData : IceInternal.IncomingAsync, AMD_GuiDataUpdater_UpdateData
    {
        public _AMD_GuiDataUpdater_UpdateData(IceInternal.Incoming inc) : base(inc)
        {
        }

        public void ice_response()
        {
            if(validateResponse__(true))
            {
                response__(true);
            }
        }
    }
}
